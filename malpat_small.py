#!/usr/bin/python
# coding=utf-8
#
# @author Guanhong
#


import random
from sklearn.ensemble import RandomForestClassifier



def read_data(filelist, filepath, data):
    for fname in filelist:
        feature = [0] * 32304
        for line in open(filepath + fname):
            line = line.strip().split(',')
            feature[int(line[0])] = int(line[1])
        data.append(feature)


def read_data_wf(filelist, filepath, data, fset):
    for fname in filelist:
        feature = [0] * len(fset)
        for line in open(filepath + fname):
            line = line.strip().split(',')
            if int(line[0]) in fset:
                feature[fset.index(int(line[0]))] = int(line[1])
        data.append(feature)



# first round
# ben: 28787
# mal: 1496

print '-------- first round --------'

ben_list_first = []
mal_list_first = []

for line in open('data/benign_list/benign_list_28787.txt'):
    ben_list_first.append(line.strip() + '.txt')

for line in open('data/malware_list/malware_list_1496.txt'):
    mal_list_first.append(line.strip() + '.txt')


print 'reading data...'

train_data_first = []

read_data(ben_list_first, 'data/benign_api_28787/', train_data_first)
read_data(mal_list_first, 'data/malware_api_15336/', train_data_first)

train_label_first = [0] * len(ben_list_first) + [1] * len(mal_list_first)


print 'training...'

rf_first = RandomForestClassifier(n_estimators=200, n_jobs=4)
rf_first.fit(train_data_first, train_label_first)


print 'selecting features...'

weight = rf_first.feature_importances_
idx = [x for x in range(len(weight))]

for i in range(len(weight)):
    for j in range(i, len(weight)):
        if weight[j] > weight[i]:
            weight[i], weight[j] = weight[j], weight[i]
            idx[i], idx[j] = idx[j], idx[i]

fset = []
for i in range(50):
    fset.append(idx[i])



# second round
# ben: 2398
# mal: 13840

print '-------- second round --------'

train_rate = 0.9
print 'train set:\t', train_rate

ben_list_second = []
mal_list_second = []

for line in open('data/benign_list/mudflow_list_2398.txt'):
    ben_list_second.append(line.strip() + '.txt')

for line in open('data/malware_list/malware_list_13840.txt'):
    mal_list_second.append(line.strip() + '.txt')


print 'reading data...'

train_ben_list_second = random.sample(ben_list_second, int(train_rate * len(ben_list_second)))
train_mal_list_second = random.sample(mal_list_second, int(train_rate * len(mal_list_second)))

test_ben_list_second = list(set(ben_list_second) - set(train_ben_list_second))
test_mal_list_second = list(set(mal_list_second) - set(train_mal_list_second))

train_data_second = []
test_data_second = []

read_data_wf(train_ben_list_second, 'data/mudflow_api_2398/', train_data_second, fset)
read_data_wf(train_mal_list_second, 'data/malware_api_15336/', train_data_second, fset)

read_data_wf(test_ben_list_second, 'data/mudflow_api_2398/', test_data_second, fset)
read_data_wf(test_mal_list_second, 'data/malware_api_15336/', test_data_second, fset)

train_label_second = [0] * len(train_ben_list_second) + [1] * len(train_mal_list_second)
test_label_second = [0] * len(test_ben_list_second) + [1] * len(test_mal_list_second)


print 'training...'

rf_second = RandomForestClassifier(n_estimators=200, n_jobs=4)
rf_second.fit(train_data_second, train_label_second)


print 'testing...'

results = rf_second.predict(test_data_second)

tp = 0
fn = 0
fp = 0
for i in range(len(results)):
    if test_label_second[i] == 1:
        if results[i] == 1:
            tp += 1
        else:
            fn += 1
    if test_label_second[i] == 0 and results[i] == 1:
        fp += 1

precision = 1.0 * tp / (tp + fp)
recall = 1.0 * tp / (tp + fn)

print 'precision:\t', precision
print 'recall:\t\t', recall